name: Xperimental testing
on:
  # schedule:
  #   - cron: '51 10 28 * *'
  # runs at 10:51 UTC every 28th day of each month
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Debug session enabled'
        required: false
        default: false
        type: boolean

jobs:
  ## CREATES CACHE ##############################################################################
  build:
    if: ${{ false }}
    name: Builds toolchain
    runs-on: ubuntu-latest
    container: alpine:edge
    defaults:
      run:
        shell: bash
    steps:
    - name: "‚è¨ Download tools"
      if: ${{ job.container }}
      shell: sh
      run: |
        apk update && apk upgrade
        apk add git bash curl jq tar
        # set PATH like in Ubuntu
        echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
        # this seems to be needed when running in a container (beause of UID mismatch??)
        git config --global --add safe.directory '*'
        
    - name: "üîß Prepare debug session"
      if: github.event.inputs.debug_enabled == 'true'
      run: |
        apk add bash nano-syntax iproute2 util-linux-misc
        wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh
        chmod +x /usr/local/bin/oh-my-posh
        wget -q https://github.com/okibcn/miniU/raw/main/Github_Linux/.nanorc -O /etc/nanorc
        wget -q https://github.com/okibcn/miniU/raw/main/Github_Linux/profile.sh -O ~/.zshrc
        cat ~/.zshrc >> ~/.bashrc 

    - name: "üêû Debug session"
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.debug_enabled == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: "üì¶ Fake package build"
      run: |
        wget https://github.com/okibcn/nano-for-windows/releases/download/v7.2-8-10163.1/llvm-mingw.tar.xz
        tar xvf llvm-mingw.tar.xz

    - name: "üöÆ Recycle Cache"
      uses: snnaplab/delete-branch-cache-action@v1

    - name: "üíæ Save Build Folder"
      uses: actions/cache@v3.3.2
      id: cache-folder
      with:
        key: llvm-folder
        path: llvm-mingw


  ## TEST CACHE ##############################################################################
  test:
    if: ${{ true }}
    name: Builds Nano
    # needs: build
    runs-on: ubuntu-latest
    container: alpine:edge
    defaults:
      run:
        shell: bash
    steps:
    - name: "‚è¨ Download tools"
      if: ${{ job.container }}
      shell: sh
      run: |
        apk update && apk upgrade
        apk add bash curl jq tar github-cli \
          git make texinfo groff gettext-dev automake autoconf pkgconf coreutils upx p7zip
        # set PATH like in Ubuntu
        echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
        # this seems to be needed when running in a container (beause of UID mismatch??)
        git config --global --add safe.directory '*'

    - name: "üìÇ Load LLVM-MinGW Folder"
      uses: actions/cache@v3.3.2
      id: cache-folder
      with:
        key: llvm-folder
        path: llvm-mingw

    - name: "üìÉ list Caches"
      run: |
        curl \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          http://github.com/repos/$GITHUB_REPOSITORY/actions/caches
      
    - name: "üîß Prepare debug session"
      if: github.event.inputs.debug_enabled == 'true'
      run: |
        apk add bash nano-syntax iproute2 util-linux-misc
        wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh
        chmod +x /usr/local/bin/oh-my-posh
        wget -q https://github.com/okibcn/miniU/raw/main/Github_Linux/.nanorc -O /etc/nanorc
        wget -q https://github.com/okibcn/miniU/raw/main/Github_Linux/profile.sh -O ~/.zshrc
        cat ~/.zshrc >> ~/.bashrc 

    - name: "üêû Debug session"
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.debug_enabled == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: " Fast Build nano"
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        CWD=$(pwd)
        export PATH="$(pwd)/llvm-mingw/bin:$PATH"
        echo "SHELL:"
        readlink /proc/$$/exe
        echo "PATH:"
        echo "$PATH" | tr : '\n'
        echo "OS PACKAGES:"
        apk list -I | sort
        echo ""
        wget -q "http://git.savannah.gnu.org/gitweb/?p=nano.git;a=shortlog" -O log.html
        VER=$(cat log.html | grep -m 1 "title=\"tags/" | grep -Eo "v[0-9]+\.[0-9]+" | head -1)
        SUBVER=$(cat log.html | awk '1; /"tag indirect"/{exit}' | grep -c '</tr>')
        NANO_VERSION="${VER}-$(SUBVER)"
        git clone git://git.savannah.gnu.org/nano.git
        cd nano
        git clone https://github.com/Bill-Gray/PDCursesMod.git curses
        git clone git://git.sv.gnu.org/gnulib.git --depth 1
        autopoint --force
        glibmodules="
            futimens
            getdelim
            getline
            getopt-gnu
            glob
            isblank
            iswblank
            lstat
            mkstemps
            nl_langinfo
            regex
            sigaction
            snprintf-posix
            stdarg
            strcase
            strcasestr-simple
            strnlen
            sys_wait
            vsnprintf-posix
            wchar
            wctype-h
            wcwidth
        "
        rm -rf lib
        ./gnulib/gnulib-tool --import ${glibmodules}
        aclocal -I m4
        autoconf
        autoheader
        automake --add-missing

        function _diff() {
            # Thanks to @rasa for this function
            mapfile -t < <(find . -type f -name '*.bak')
            for bak in "${MAPFILE[@]}"; do
              src=${bak/.bak/}
              for ((n=1; ; n++)); do
                patch=${src}-${n}.patch
                test -f "${patch}" || break
              done
              diff -u -w "${bak}" "${src}" >"${patch}" || true
              rm -f "${bak}" || true
              if [[ ! -s "${patch}" ]]; then
                rm -f "${patch}" || true
                continue
              fi
              echo "${patch}":
              cat "${patch}"
            done
            return 0
        }

        ##########################
        ##                        ##
        ##     APPLY PATCHES      ##
        ##                        ##
        ##########################

        # 1. >realpath< function doesn't exist on Windows, which isn't fully POSIX compliant.
        echo -e "\n\nPATCH: realpath() workaround applied."
        cp -p ./src/definitions.h{,.bak}
        echo " " >> ./src/definitions.h
        echo "#ifdef _WIN32" >> ./src/definitions.h
        echo "#include <windows.h>"  >> ./src/definitions.h
        echo "#include \"uniwidth.h\""  >> ./src/definitions.h
        echo "#define realpath(N,R) _fullpath((R),(N),0)" >> ./src/definitions.h
        echo "#endif" >> ./src/definitions.h
        _diff

        # Fix homedir detection
        echo -e "\n\nPATCH: configuring Windows home folder."
        sed -i.bak 's|\"HOME\"|"USERPROFILE\"|g' ./src/utils.c
        _diff

        # Modify temporal path from linux to windows
        echo -e "\n\nPATCH: configuring Windows temporal folder."
        sed -i.bak 's|TMPDIR|TEMP|g' ./src/files.c
        echo -e "\n\nPATCH: Convert invalid filename characters to ! for backup files."
        sed -i "s~if (thename\[i\] == '/')~if (strchr(\"<>:\\\\\"/\\\\\\\\|?*\", thename[i]))~g" ./src/files.c
        sed -i 's|/tmp/|~/AppData/Local/Temp/|g' ./src/files.c
        _diff

        # Modify path expansion with backslashes
        echo -e "\n\nPATCH: Configuring backslashes for folders."
        sed -i.bak "/free(tilded)/a\
            \\\\tfor(tilded = retval; \*tilded; ++tilded) if(\*tilded == '\\\\\\\\') \*tilded = '/';

            s|path\[i\] != '/'|path[i] != '/' \&\& path[i] != '\\\\\\\\'|" src/files.c
        _diff

        # default open() files in binary mode as linux does
        echo -e "\n\nPATCH: Forcing file management in binary mode like the Linux version."
        sed -i.bak 's/O_..ONLY/& | _O_BINARY/g' ./src/files.c
        _diff
        sed -i.bak 's/O_..ONLY/& | _O_BINARY/g' ./src/text.c
        _diff

        # Enable UTF-8 Terminal
        echo -e "\n\nPATCH: Enable UTF-8 console."
        sed -i.bak 's|vt220||g
            /x1B/d
            /nl_langinfo(CODESET)/ c\\tsetlocale(LC_ALL, "");'  src/nano.c
        _diff

        # Allow custom colors in terminals with more than 256 colors
        echo -e "\n\nPATCH: Allow true color."
        sed -i.bak "/COLORS == 256/ {s/==/>=/}"  src/rcfile.c
        _diff

        # Solve window resize crashes
        echo -e "\n\nPATCH: Window resize fix."
        sed -i.bak -e "/LINES and COLS accordingly/{n;N;d}" src/nano.c # delets 2 next lines
        sed -i "/LINES and COLS accordingly/a\
            \\\\tresize_term(0, 0);\\n\
            erase();" src/nano.c
        sed -i -e "/recreate the subwindows with their (new) sizes/{n;d}" src/nano.c
        _diff
        sed -i.bak 's/the_window_resized/input == KEY_RESIZE/' src/winio.c
        _diff

        # Solve long delay after unicode
        echo -e "\n\nPATCH: solved deadlock with unicode characters."
        sed -i.bak "/halfdelay(ISSET(QUICK_BLANK)/,/disable_kb_interrupt/d"  src/winio.c
        _diff

        # Add (Y/N/^C) to Save modified buffer prompt
        echo -e "\n\nPATCH: More info for exit message."
        sed -i.bak "s|Save modified buffer|& (Y/N/^C)|"  src/nano.c
        _diff

        # Fix browser folder change
        echo -e "\n\nPATCH: Fixed browser folder change."
        sed -i.bak 's/--selected/selected=0/' src/browser.c
        _diff

        # Fix for unicode char width detection using GNUlib internal function
        echo -e "\n\nPATCH: unicode char width detection using GNUlib internal function."
        sed -i.bak 's|wcwidth(wc)|uc_width(wc, "UTF-8")|g'  src/chars.c src/winio.c
        sed -i '/prototypes.h/a#include "uniwidth.h"'  src/chars.c
        _diff

        # Fix pipe-in data from Windows console.
        echo -e "\n\nPATCH: Fix pipe in data in Windows console."
        sed -i.bak "s|/dev/tty|CON|" src/nano.c
        sed -i "s/stream, 0/stream, fd/" src/nano.c
        sed -i "/FILE \*stream/,/stop the reading/ c\
            \\\\t static FILE \*stream;\\n\
            static int fd\=0;\\n\
            if \(fd\=\=0){\\n\
            if \(GetConsoleWindow\() \!\= NULL)\\n\
            fprintf\(stderr, _\(\"Reading data from keyboard; type a ^Z line to finish.\\\\n\"));\\n\
            fd \= dup\(0);\\n\
            stream \= fdopen\(fd, \"rb\");\\n\
            freopen\(\"CON\", \"rb\", stdin);\\n\
            FreeConsole\();\\n\
            AttachConsole\(ATTACH_PARENT_PROCESS);\\n\
            return FALSE;}\\n\
            endwin\();\\n\
            if \(stream \=\= NULL) {\\n\
            \\t int errnumber \= errno;\\n\
            \\t if\(fd \> -1) close\(fd);\\n\
            return FALSE;}" src/nano.c
        sed -i "/initscr/i\
            for\(int optind_\=optind; optind_ \< argc;optind_\+\+)\\n\
            if \(strcmp\(argv\[optind_], \"\-\") \=\= 0){scoop_stdin\();break;}" src/nano.c
        _diff


        ####                               ####
        #### PDCursesMod especific patches ####
        ####                               ####

        # Solve duplicated definitions ALT-ARROWS already in PDCursesMod
        echo -e "\n\nPATCH: remove duplicated definitions."
        sed -i.bak "/0x42[1234]/d" src/definitions.h
        _diff

        # PDCurses uses 64bit (chtype) for cell attributes instead of 32bit (int)
        echo -e "\n\nPATCH: Improving from 256colors to true color."
        sed -i.bak "/interface_color_pair/ {s/int/chtype/}" src/prototypes.h src/global.c
        _diff
        sed -i.bak "/int attributes/ {s/int/chtype/}" src/definitions.h
        _diff
        sed -i.bak "/bool parse_combination/ {s/int/chtype/}" src/rcfile.c
        sed -i "/int attributes/ {s/int/chtype/}" src/rcfile.c
        _diff

        # Desambiguation of BACKSPACE vs ^H, or ENTER vs ^M and certain CTRL+key combos             //o//
        echo -e "\n\nPATCH: Full key modifiers detection."
        sed -i.bak "/get_kbinput(midwin, VISIBLE)/a\
            \\\\tif (\!((PDC_get_key_modifiers()) & (PDC_KEY_MODIFIER_SHIFT|PDC_KEY_MODIFIER_CONTROL|PDC_KEY_MODIFIER_ALT)) ) {\\n\
            \\tswitch (input) {\\n\
            \\t\\tcase 0x08:      input = KEY_BACKSPACE; break;\\n\
            \\t\\tcase 0x0d:      input = KEY_ENTER;\\n\
            \\t}\\n\
            }\\n\
            if (PDC_get_key_modifiers() & PDC_KEY_MODIFIER_CONTROL){\\n\
            switch (input) {\\n\
            \\t\\tcase '/':          input = 31; break;\\n\
            \\t\\tcase SHIFT_DELETE: input = CONTROL_SHIFT_DELETE; break;\\n\
            \\t}\\n\
            }"  src/nano.c
        sed -Ei.bak '
            s|(M-\{", )0|\1ALT_LBRACKET|
            s|(M-}", )0|\1ALT_RBRACKET|
            ' src/global.c
        sed -i.bak "
            s/0x401/CTL_LEFT/
            s/0x402/CTL_RIGHT/
            s/0x403/CTL_UP/
            s/0x404/CTL_DOWN/
            s/0x405/CTL_HOME/
            s/0x406/CTL_END/
            s/0x40D/CTL_DEL/
            s/0x427/ALT_PGUP/
            s/0x428/ALT_PGDN/
            s/0x42C/ALT_INS/
            s/0x42D/ALT_DEL/
            " src/definitions.h
        _diff

        # Fix wchar_t 16 bits limitation to display emojis and all the suplemental codepoints:
        echo -e "\n\nPATCH: change to 32 bits wchar_t."
        sed -i.bak '1,/#/ s/#/#define wchar_t int\n&/' src/definitions.h curses/curses.h
        _diff
        echo -e "\n\nPATCH: fix for emojis input and output and transparent background."
        wget -q https://github.com/okibcn/nano-editor/raw/my-github-sync/curses/pdcurses/getch.c
        wget -q https://github.com/okibcn/nano-editor/raw/my-github-sync/curses/wincon/pdcdisp.c
        wget -q https://github.com/okibcn/nano-editor/raw/my-github-sync/curses/wincon/pdckbd.c
        mv -b --suffix=.bak getch.c curses/pdcurses
        mv -b --suffix=.bak pdc*.c curses/wincon
        _diff

        # Fix ALT+[NUMBER|LETTER] not working with PDCursesMod
        echo -e "\n\nPATCH: ALT+[NUMBER|LETTER] not working."
        sed -i.bak "s/char)keystring\[2])/&\+\(\(unsigned char)keystring\[2]>\='9' \? ALT_A-\(int)'a' \: ALT_0-\(int)'0')/" src/global.c
        _diff

        # Fix Shifted metas SHIFT+ALT+[LETTER] not working with PDCursesMod
        echo -e "\n\nPATCH: Shifted metas SHIFT+ALT+[LETTER] not working."
        sed -i.bak "/(escapes == 0)/a\
            meta_key\=PDC_get_key_modifiers\() \& PDC_KEY_MODIFIER_ALT;" src/winio.c
        _diff


        ####                               ####
        ####   LLVM-MING SPECIFIC PATCHES  ####
        ####                               ####

        # Fix folder access test:
        echo -e "\n\nPATCH: Porting folder accessibility from executable to read access."
        sed -i.bak "s/X_OK/R_OK/" src/files.c
        _diff

        # Fix for PDCursesMod makefile to be aware of aarch64 in Xcompiling environment:
        echo -e "\n\nPATCH: PDCursesMod makefile to be aware of aarch64 in Xcompiling environment."
        sed -i.bak '/i686-w64-mingw32/a endif\n  ifdef _a64\n    PREFIX  = aarch64-w64-mingw32-' curses/wincon/Makefile  
        sed -i 's|AR\s*=\s*|&$(PREFIX)|' curses/wincon/Makefile  
        sed -i 's|STRIP\s*=\s*|&$(PREFIX)|' curses/wincon/Makefile
        _diff  


        ####                               ####
        ####    BRANDING and VERSIONING    ####
        ####                               ####

        BUILD_VERSION="$(git describe --tags 2>/dev/null | sed "s/.\{10\}$//")"
        LAST_BUILD_VERSION="$(gh api repos/$GITHUB_REPOSITORY/releases/latest | jq .tag_name -r)" || echo "FIRST RELEASE!!!!"
        LAST_NANO_VERSION="$(echo $LAST_BUILD_VERSION | awk -F [\.-]  '{print $1"."$2"-"$3}')"  # last version without the subbuild
        if [ "${BUILD_VERSION}" == "${LAST_NANO_VERSION}" ]; then
            # This is a new Windows build based on the same nano build, probably because there is a new curses patch
            SUBBUILD="$(echo $LAST_BUILD_VERSION | awk -F .  '{print $3}')"
            ((SUBBUILD=SUBBUILD+1))
            BUILD_VERSION="${BUILD_VERSION}.${SUBBUILD}"
        fi
        cd curses
        CURSES="$(gh api repos/Bill-Gray/PDCursesMod/releases/latest | jq .tag_name -r)"
        CURSES_DATE=$(TZ=UTC git show --quiet --date='format-local:%Y.%m.%d' --format="%cd")
        CURSES="PDCursesMod ${CURSES} build $(git rev-list --count HEAD), ${CURSES_DATE}"
        cd ..
        NANO_DATE=$(TZ=UTC git show --quiet --date='format-local:%Y.%m.%d' --format="%cd")
        BUILD_DATE=$(TZ=UTC date +'%Y.%m.%d')

        sed -i.bak 's/ GNU nano from git,//' src/nano.c
        sed -i 's|Compiled options|Using '"${CURSES}"'\\n &|' src/nano.c
        _diff
        sed -i.bak '/SOMETHING = "REVISION/cSOMETHING = "REVISION \\"GNU nano for Windows 64 bits '"${BUILD_VERSION}"' '"${BUILD_DATE}"'\\""' src/Makefile.am
        _diff
        echo -e "\n\nGNU nano version Tag: ${BUILD_VERSION}, ${BUILD_DATE}\nUsing $CURSES"

        ##########################
        ##                        ##
        ##     BUILD NANO         ##
        ##                        ##
        ##########################
        ARCH=x86_64

        PDTERM="wincon"    # PDCursesMod supports wincon, vt, wingui, sdl1, sdl2
        TARGET="${ARCH}-w64-mingw32"
        OUTDIR="$(pwd)/pkg_${ARCH}"
        [ "${ARCH}" != "i686" ] && BITS="64" || BITS="32"
        [ "${ARCH}" == "aarch64" ] && _arch="_a64"
        [ "${ARCH}" == "x86_64" ] && _arch="_w64"
        [ "${ARCH}" == "i686" ] && _arch="_w32"
        export CURSES_DIR="$(pwd)/curses"
        export UPX="--lzma --best"
        export CFLAGS="-O3 -Oz -fno-math-errno -flto -DPDC_FORCE_UTF8 -DPDC_NCMOUSE"
        export LDFLAGS="-L${CURSES_DIR}/${PDTERM} -static -static-libgcc ${CURSES_DIR}/${PDTERM}/pdcurses.a"
        export NCURSESW_CFLAGS="-I${CURSES_DIR} -DNCURSES_STATIC  -DENABLE_MOUSE"
        export NCURSESW_LIBS="-l:pdcurses.a -lwinmm"
        export LIBS="-lbcrypt"
        # cross Build pdcurses for destination host
        cd "${CURSES_DIR}/${PDTERM}"
        make -j$(($(nproc)*2)) WIDE=Y UTF8=Y ${_arch}=Y
        cd ../..
        # Build nano
        sed -i 's/...bits/64 bits/' src/Makefile.am
        mkdir -p "$(pwd)/build_${TARGET}/nano"
        cd "$(pwd)/build_${TARGET}/nano"
        ../../configure --host="${TARGET}" --prefix="${OUTDIR}"  \
            --enable-{utf8,threads=windows} --disable-{nls,speller} \
            --sysconfdir="C:\\ProgramData"
        echo  -e "
          #define HAVE_FREXPL_IN_LIBC 1
          #define HAVE_FREXP_IN_LIBC 1
          #define HAVE_SNPRINTF_RETVAL_C99 1
          #define HAVE_SNPRINTF_TRUNCATION_C99 1
          #define MBRTOWC_EMPTY_INPUT_BUG 1
        " >> config.h
        sed -i "/#define NEED_PRINTF_DIRECTIVE_A 1/d" config.h
        sed -i "/#define NEED_PRINTF_DIRECTIVE_F 1/d" config.h
        sed -i "/#define NEED_PRINTF_FLAG_GROUPING 1/d" config.h
        sed -i "/#define NEED_PRINTF_FLAG_ZERO 1/d" config.h
        sed -i "/#define NEED_PRINTF_INFINITE_DOUBLE 1/d" config.h
        sed -i "/#define NEED_PRINTF_UNBOUNDED_PRECISION 1/d" config.h
        # sed -i "/#define __GETOPT_PREFIX rpl_/d" config.h
        make -j$(($(nproc)*2)) && \
        make install || exit 1
        cd ${OUTDIR}
            wget -q https://raw.githubusercontent.com/okibcn/nano-for-windows/releases/LICENSE
            wget -q https://raw.githubusercontent.com/okibcn/nano-for-windows/releases/README.md
            mv bin/nano.exe share/doc/nano/* $CWD/nano/doc/sample.nanorc.in .
            mv share/nano syntax
            mv sample.nanorc.in .nanorc
            rm -rf bin share rnano*
            llvm-strip -s nano.exe
            upx nano.exe || true
            ls -als
            7z a -mx9 -mm=Deflate64 -mmt$(nproc) "$CWD/nano_for-windows${_arch}_${BUILD_VERSION}.zip" * .nanorc
            # 7z a -mx9 -mm=PPMd:o=16 -mmt$(nproc) '-x!*.exe' "$CWD/nano_for-windows${_arch}_${BUILD_VERSION}.7z" * .nanorc
            # 7z a -mx9 -mm=Deflate64 -mmt$(nproc) "$CWD/nano_for-windows${_arch}_${BUILD_VERSION}.7z" nano.exe
            echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV

    - name: "üëç Upload Artifact"
      uses: actions/upload-artifact@v3
      with:
        name: nano-for-windows_${{ env.BUILD_VERSION }}
        path: |
          *.zip
